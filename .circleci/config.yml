version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@6.0.0
  slack: circleci/slack@4.10.1
  browser-tools: circleci/browser-tools@1.4.0

parameters:
  alerts-slack-channel:
    type: string
    default: manage_a_workforce_dev
  releases-slack-channel:
    type: string
    default: manage_a_workforce_dev
  node-version:
    type: string
    default: 18.9-browsers
  postgres_tag:
    default: "14"
    type: string
  database_user:
    default: "root"
    type: string
  database_password:
    default: "dev"
    type: string

executors:
  docker-env:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
      - image: bitnami/redis:7.0
        environment:
          - ALLOW_EMPTY_PASSWORD=yes
      - image: quay.io/hmpps/hmpps-auth:latest
        environment:
          - SPRING_PROFILES_ACTIVE=dev,delius
          - DELIUS_ENABLED=true
          - SERVER_PORT=9090
      - image: postgres:<< pipeline.parameters.postgres_tag >>
        environment:
          - POSTGRES_PASSWORD=<< pipeline.parameters.database_password >>
          - POSTGRES_USER=<< pipeline.parameters.database_user >>
      - image: quay.io/hmpps/hmpps-workload:latest
        environment:
          - DATABASE_USERNAME=<< pipeline.parameters.database_user >>
          - DATABASE_PASSWORD=<< pipeline.parameters.database_password >>
          - SPRING_PROFILES_ACTIVE=dev,docker
          - HMPPS_SQS_LOCALSTACK_URL=http://localhost:4566
        entrypoint: ["/bin/sh", "-c" , "sleep 10 && java -javaagent:/app/agent.jar -jar /app/app.jar"]
      - image: localstack/localstack:1.2.0
        environment:
          - SERVICES=s3,sqs,sns
          - DEBUG=${DEBUG- }
          - DATA_DIR=/tmp/localstack/data
          - DOCKER_HOST=unix:///var/run/docker.sock
          - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }
          - AWS_EXECUTION_ENV=True
          - DEFAULT_REGION=eu-west-2
          - TMPDIR=/private
    working_directory: ~/app

jobs:
  build:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci --no-audit
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache
      - run:
          command: |
            npm run build
            DATE=$(date '+%Y-%m-%d')
            export BUILD_NUMBER=${DATE}.${CIRCLE_BUILD_NUM}
            export GIT_REF="$CIRCLE_SHA1"
            npm run record-build-info
      - run:
          name: Linter check
          command: npm run lint
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - build-info.json
            - build
            - dist
            - app/public

  check_outdated:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-npm
          command: 'npm ci --no-audit'
      - run:
          name: Check version
          command: 'npm --version'
      - run:
          name: Run check
          command: 'npm outdated govuk-frontend'
      - slack/notify:
          event: fail
          channel: << pipeline.parameters.alerts-slack-channel >>
          template: basic_fail_1

  unit_test:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: unit tests
          command: npm run test
      - when:
          condition: 
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - slack/notify:
                event: fail
                channel: << pipeline.parameters.alerts-slack-channel >>
                template: basic_fail_1
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results/unit-test-reports.html
  integration_test:
    executor: docker-env
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - attach_workspace:
          at: ~/app
      - hmpps/install_aws_cli
      - run:
          name: Wait for s3 to be ready
          command: curl -4 --connect-timeout 30 --retry-connrefused --retry 20 --retry-delay 5 http://localhost:4566
      - run:
          name: Set up s3 bucket
          command: test/integration/resources/setup-s3.sh test/integration/resources
      - run:
          name: Wait for db to initialise
          command: sleep 20
      - run:
         name: Run integration tests
         command: npm run integration-test

      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results/integration-test-reports.html
  accessibility_test:
    executor: docker-env
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - attach_workspace:
          at: ~/app
      - run:
          name: Get wiremock
          command: curl -o wiremock.jar https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.27.1/wiremock-standalone-2.27.1.jar
      - run:
          name: Run wiremock
          command: java -jar wiremock.jar --port 8099 --global-response-templating --root-dir test/e2e/resources/wiremock
          background: true
      - run:
          name: Run user preference wiremock
          command: java -jar wiremock.jar --port 8098 --global-response-templating --root-dir test/e2e/resources/user-preference-wiremock
          background: true
      - run:
          name: Wait for db to initialise
          command: sleep 20
      - run:
          name: Run the node app
          command: npm run start
          background: true
      - run:
          name: Wait for node app to start
          command: sleep 10
      - run:
          name: run accessibility tests
          command: npm run accessibility-test-ci
  e2e_test:
    executor: docker-env
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - attach_workspace:
          at: ~/app
      - hmpps/install_aws_cli
      - browser-tools/install-chrome:
          chrome-version: 91.0.4472.101
      - browser-tools/install-chromedriver
      - run:
          name: Wait for s3 to be ready
          command: curl -4 --connect-timeout 30 --retry-connrefused --retry 20 --retry-delay 5 http://localhost:4566
      - run:
          name: Set up s3 bucket
          command: test/integration/resources/setup-s3.sh test/integration/resources
      - run:
          name: Get wiremock
          command: curl -o wiremock.jar https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.27.1/wiremock-standalone-2.27.1.jar
      - run:
          name: Run wiremock
          command: java -jar wiremock.jar --port 8099 --global-response-templating --root-dir test/e2e/resources/wiremock
          background: true
      - run:
          name: Run user preference wiremock
          command: java -jar wiremock.jar --port 8098 --global-response-templating --root-dir test/e2e/resources/user-preference-wiremock
          background: true
      - run:
          name: Wait for db to initialise
          command: sleep 20
      - run:
          name: Run the node app
          command: npm run start
          background: true
      - run:
          name: Wait for node app to start
          command: sleep 10
      - run:
          name: run end to end tests
          command: npm run test-e2e
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results/e2e

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
          context: hmpps-common-vars
          filters:
            tags:
              ignore: /.*/
      - unit_test:
          context: hmpps-common-vars
          requires:
            - build
      - integration_test:
          context: hmpps-common-vars
          requires:
            - build
      - accessibility_test:
          context: hmpps-common-vars
          requires:
            - build
      - e2e_test:
          context: hmpps-common-vars
          requires:
            - build
      - hmpps/helm_lint:
          name: helm_lint
      - hmpps/build_docker:
          name: build_docker
          filters:
            branches:
              only:
                - main
      - hmpps/deploy_env:
          name: deploy_dev
          env: "dev"
          jira_update: true
          jira_env_type: development
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - helm_lint
            - unit_test
            - build_docker
            - e2e_test
            - accessibility_test
            - integration_test
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_preprod
          env: "preprod"
          jira_update: true
          jira_env_type: staging
          context:
            - hmpps-common-vars
            - hmpps-workload-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: "prod"
          jira_update: true
          jira_env_type: production
          slack_notification: true
          slack_channel_name: << pipeline.parameters.releases-slack-channel >>
          context:
            - hmpps-common-vars
            - hmpps-workload-prod
          requires:
            - request-prod-approval

  security:
    triggers:
      - schedule:
          cron: "30 5 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - check_outdated:
          context:
            - hmpps-common-vars
      - hmpps/npm_security_audit:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          node_tag: << pipeline.parameters.node-version >>
          context:
            - hmpps-common-vars
      - hmpps/trivy_latest_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/veracode_pipeline_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
  security-weekly:
    triggers:
      - schedule:
          cron: "0 5 * * 1"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/veracode_policy_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
 